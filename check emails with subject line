# Diagnostic Script to Test Email Search Issues
# This will help identify why emails aren't being found

try { [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 } catch {}

function Get-AccessToken {
    param(
        [Parameter(Mandatory=$true)] [string]$TenantId,
        [Parameter(Mandatory=$true)] [string]$ClientId,
        [Parameter(Mandatory=$true)] [securestring]$ClientSecret
    )
    $tokenUrl = "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token"
    $secretPtr = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($ClientSecret)
    try {
        $secretPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto($secretPtr)
        $body = @{
            client_id     = $ClientId
            scope         = "https://graph.microsoft.com/.default"
            client_secret = $secretPlain
            grant_type    = "client_credentials"
        }
        return (Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body -ContentType "application/x-www-form-urlencoded").access_token
    } finally {
        if ($secretPtr -ne [IntPtr]::Zero) { [Runtime.InteropServices.Marshal]::ZeroFreeBSTR($secretPtr) }
        Remove-Variable secretPlain -ErrorAction SilentlyContinue
    }
}

function Get-FolderId {
    param(
        [Parameter(Mandatory=$true)] [string]$MailboxUPN,
        [Parameter(Mandatory=$true)] [string]$FolderName,
        [Parameter(Mandatory=$true)] [hashtable]$Headers
    )
    $baseUrl = "https://graph.microsoft.com/v1.0"
    $encUser = [uri]::EscapeDataString($MailboxUPN)
    $encFilter = [uri]::EscapeDataString("displayName eq '$FolderName'")
    $uri = "$baseUrl/users/$encUser/mailFolders?`$filter=$encFilter&`$select=id,displayName"
    try {
        $response = Invoke-RestMethod -Method Get -Uri $uri -Headers $Headers
        if ($response.value -and $response.value.Count -gt 0) { 
            return $response.value[0].id 
        }
        throw "Folder '$FolderName' not found"
    } catch { 
        throw "Error finding folder '$FolderName': $_" 
    }
}

Write-Host "=== EMAIL SEARCH DIAGNOSTIC TOOL ===" -ForegroundColor Cyan
Write-Host "This tool will help diagnose why emails aren't being found" -ForegroundColor Yellow
Write-Host ""

# Get credentials
Write-Host "=== AUTHENTICATION ===" -ForegroundColor Cyan
$TenantId = Read-Host "Enter Tenant ID"
$ClientId = Read-Host "Enter Client ID"
$ClientSecret = Read-Host "Enter Client Secret" -AsSecureString
$MailboxUPN = Read-Host "Enter mailbox UPN/email"

Write-Host "`nAuthenticating..." -ForegroundColor Cyan
try {
    $token = Get-AccessToken -TenantId $TenantId -ClientId $ClientId -ClientSecret $ClientSecret
    $headers = @{ "Authorization" = "Bearer $token" }
    Write-Host "Authentication successful!" -ForegroundColor Green
} catch {
    Write-Host "Authentication failed: $_" -ForegroundColor Red
    exit
}

# Get folder ID
Write-Host "`nFinding 'inbox_copy' folder..." -ForegroundColor Cyan
try {
    $folderId = Get-FolderId -MailboxUPN $MailboxUPN -FolderName "inbox_copy" -Headers $headers
    Write-Host "Found folder with ID: $folderId" -ForegroundColor Green
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
    exit
}

Write-Host "`n=== DIAGNOSTIC TESTS ===" -ForegroundColor Cyan

# Test 1: Get ALL emails from the folder (no filter)
Write-Host "`nTEST 1: Getting first 10 emails from inbox_copy (no filters)..." -ForegroundColor Yellow
$baseUrl = "https://graph.microsoft.com/v1.0"
$encUser = [uri]::EscapeDataString($MailboxUPN)
$uri = "$baseUrl/users/$encUser/mailFolders/$folderId/messages?`$top=10&`$select=subject,receivedDateTime"

try {
    $response = Invoke-RestMethod -Method Get -Uri $uri -Headers $headers
    if ($response.value -and $response.value.Count -gt 0) {
        Write-Host "Found $($response.value.Count) emails:" -ForegroundColor Green
        foreach ($email in $response.value) {
            $date = [datetime]::Parse($email.receivedDateTime).ToString("yyyy-MM-dd HH:mm")
            Write-Host "  - Date: $date | Subject: $($email.subject)" -ForegroundColor White
        }
    } else {
        Write-Host "No emails found in folder!" -ForegroundColor Red
    }
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}

# Test 2: Search with simple partial text
Write-Host "`nTEST 2: Testing simple partial search..." -ForegroundColor Yellow
$testSearch = Read-Host "Enter a simple search term (e.g., '097-0136361' or 'Servicing Request')"

$escapedSearch = $testSearch -replace "'", "''"
$filter = "contains(subject, '$escapedSearch')"
$encFilter = [uri]::EscapeDataString($filter)
$uri = "$baseUrl/users/$encUser/mailFolders/$folderId/messages?`$filter=$encFilter&`$select=subject,receivedDateTime"

Write-Host "Using filter: contains(subject, '$escapedSearch')" -ForegroundColor Gray

try {
    $response = Invoke-RestMethod -Method Get -Uri $uri -Headers $headers
    if ($response.value -and $response.value.Count -gt 0) {
        Write-Host "Found $($response.value.Count) matching emails:" -ForegroundColor Green
        foreach ($email in $response.value) {
            $date = [datetime]::Parse($email.receivedDateTime).ToString("yyyy-MM-dd HH:mm")
            Write-Host "  - Date: $date | Subject: $($email.subject)" -ForegroundColor White
        }
    } else {
        Write-Host "No emails found with this search term!" -ForegroundColor Red
    }
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}

# Test 3: Test date filtering
Write-Host "`nTEST 3: Testing date filter..." -ForegroundColor Yellow
$dateInput = Read-Host "Enter a date (YYYY-MM-DD) to test"
try {
    $testDate = [datetime]::ParseExact($dateInput, "yyyy-MM-dd", $null)
    $startDate = $testDate.Date.ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDate = $testDate.Date.AddDays(1).ToString("yyyy-MM-ddTHH:mm:ssZ")
    
    Write-Host "Searching from $startDate to $endDate" -ForegroundColor Gray
    
    $filter = "receivedDateTime ge $startDate and receivedDateTime lt $endDate"
    $encFilter = [uri]::EscapeDataString($filter)
    $uri = "$baseUrl/users/$encUser/mailFolders/$folderId/messages?`$filter=$encFilter&`$select=subject,receivedDateTime"
    
    $response = Invoke-RestMethod -Method Get -Uri $uri -Headers $headers
    if ($response.value -and $response.value.Count -gt 0) {
        Write-Host "Found $($response.value.Count) emails on this date:" -ForegroundColor Green
        foreach ($email in $response.value) {
            $date = [datetime]::Parse($email.receivedDateTime).ToString("yyyy-MM-dd HH:mm:ss")
            Write-Host "  - Time: $date | Subject: $($email.subject)" -ForegroundColor White
        }
    } else {
        Write-Host "No emails found on this date!" -ForegroundColor Red
    }
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}

# Test 4: Test with exact text from Excel
Write-Host "`nTEST 4: Test with exact text from your Excel..." -ForegroundColor Yellow
Write-Host "Copy and paste EXACTLY what's in your Excel cell (including ... if present):" -ForegroundColor Cyan
$exactText = Read-Host "Paste exact text"

$escapedExact = $exactText -replace "'", "''"
$filter = "contains(subject, '$escapedExact')"
$encFilter = [uri]::EscapeDataString($filter)
$uri = "$baseUrl/users/$encUser/mailFolders/$folderId/messages?`$filter=$encFilter&`$select=subject,receivedDateTime"

Write-Host "Searching for: '$escapedExact'" -ForegroundColor Gray

try {
    $response = Invoke-RestMethod -Method Get -Uri $uri -Headers $headers
    if ($response.value -and $response.value.Count -gt 0) {
        Write-Host "Found $($response.value.Count) matching emails!" -ForegroundColor Green
        foreach ($email in $response.value) {
            Write-Host "  - Subject: $($email.subject)" -ForegroundColor White
        }
    } else {
        Write-Host "Not found. The text in Excel might be truncated." -ForegroundColor Red
        Write-Host "Try using a shorter search term from the middle of the subject." -ForegroundColor Yellow
    }
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}

Write-Host "`n=== DIAGNOSTIC COMPLETE ===" -ForegroundColor Green
Write-Host "Based on the results above, you can identify:" -ForegroundColor Yellow
Write-Host "1. Whether emails exist in the folder" -ForegroundColor White
Write-Host "2. The exact format of dates in the emails" -ForegroundColor White
Write-Host "3. Whether partial search is working" -ForegroundColor White
Write-Host "4. Whether your Excel contains truncated text" -ForegroundColor White
